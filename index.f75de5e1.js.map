{"mappings":"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","sources":["src/scripts/main.js"],"sourcesContent":["\"use strict\";\n\nconst startButton = document.querySelector(\".start\");\n\nstartButton.insertAdjacentHTML(\n  \"afterend\",\n  `\n  <button class=\"button restart hidden\">Restart</button>\n  `\n);\n\nconst restartButton = document.querySelector(\".restart\");\nconst messageStart = document.querySelector(\".message-start\");\nconst messageLose = document.querySelector(\".message-lose\");\nconst messageWin = document.querySelector(\".message-win\");\nconst fieldCells = document.querySelectorAll(\".field-cell\");\nconst scoreSpan = document.querySelector(\".game-score\");\n\nconst getRandomCellValue = () => {\n  return Math.floor(Math.random() * 10) < 9 ? 2 : 4;\n};\n\nconst getFreeRandomCell = () => {\n  const freeCells = [...fieldCells].filter((el) => el.classList.length === 1);\n  const randomIndex = Math.floor(Math.random() * freeCells.length);\n\n  return freeCells[randomIndex];\n};\n\nconst fillNewCell = () => {\n  const cell = getFreeRandomCell();\n  const value = getRandomCellValue();\n\n  cell.textContent = value;\n  cell.classList.add(`field-cell--${value}`);\n};\n\nconst toggleHidden = (...elements) => {\n  elements.forEach((element) => {\n    element.classList.toggle(\"hidden\");\n  });\n};\n\nstartButton.addEventListener(\"click\", () => {\n  fillNewCell();\n  fillNewCell();\n  toggleHidden(startButton, restartButton, messageStart);\n  messageLose.classList.add(\"hidden\");\n  document.addEventListener(\"keydown\", handleMove);\n});\n\nrestartButton.addEventListener(\"click\", () => {\n  [...fieldCells].map((item) => {\n    item.textContent = \"\";\n    item.className = \"field-cell\";\n  });\n  toggleHidden(startButton, restartButton, messageStart);\n  messageLose.classList.add(\"hidden\");\n  setScore(0);\n  document.addEventListener(\"keydown\", handleMove);\n});\n\nconst setProperClass = (cell) => {\n  if (cell.textContent) {\n    cell.className = `field-cell field-cell--${cell.textContent}`;\n\n    return;\n  }\n\n  cell.className = `field-cell`;\n};\n\nconst changeValues = (line, valA, valB, mult = 0) => {\n  let temp = line[valA + valB].textContent;\n\n  if (mult) {\n    temp *= 2;\n  }\n\n  line[valA].textContent = temp;\n  setProperClass(line[valA]);\n  line[valA + valB].textContent = \"\";\n  setProperClass(line[valA + valB]);\n};\n\nconst move = (start, endX, endY, step, stepX, stepY) => {\n  for (let x = 0; x < endY; x += step) {\n    const line = [];\n\n    for (let i = 0 + x; i < fieldCells.length; i += stepY) {\n      if (line.length < 4) {\n        line.push(fieldCells[i]);\n      }\n    }\n\n    const moveLine = (a = start, b = stepX) => {\n      for (let i = a; i !== endX; i += b) {\n        if (!line[i].textContent) {\n          changeValues(line, i, b);\n        }\n\n        if (\n          line[i].textContent === line[i + b].textContent &&\n          line[i].textContent\n        ) {\n          setProperClass(line[i]);\n        }\n      }\n    };\n\n    for (let y = 0; y < 3; y++) {\n      moveLine();\n    }\n\n    const collapseLine = (i, b) => {\n      let equalCount = 0;\n\n      if (\n        line[i].textContent === line[i + b].textContent &&\n        !!line[i].textContent\n      ) {\n        equalCount++;\n        changeValues(line, i, b, 2);\n        setScore(+scoreSpan.textContent + +line[i].textContent * 2);\n      }\n\n      return equalCount;\n    };\n\n    for (let i = start; i !== endX; i += stepX) {\n      if (collapseLine(i, stepX)) {\n        moveLine(i, stepX);\n      }\n    }\n  }\n};\n\nconst setScore = (value) => {\n  scoreSpan.textContent = value;\n};\n\nconst getFieldState = (cells = fieldCells) => {\n  return [...cells].map((cell) => cell.textContent);\n};\n\nconst checkStateChange = (prev, curr) => {\n  for (let i = 0; i < prev.length; i++) {\n    if (prev[i] !== curr[i]) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nconst checkEmptyCells = () => {\n  return [...fieldCells].some((el) => {\n    return el.classList.length === 1;\n  });\n};\n\nconst checkWin = () => {\n  return [...fieldCells].some((el) => el.textContent === 2048);\n};\n\nconst checkNeighbours = () => {\n  const cells = getFieldState();\n\n  for (let i = 0; i <= 12; i++) {\n    if ((i + 1) % 4 === 0 && i <= 11) {\n      if (cells[i] === cells[i + 4]) {\n        return true;\n      }\n    }\n\n    if ((i + 1) % 4 !== 0) {\n      if (cells[i] === cells[i + 1] || cells[i] === cells[i + 4]) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\nconst handleMove = (e) => {\n  const prevState = getFieldState();\n\n  if (e.key === \"ArrowDown\") {\n    move(3, 0, 4, 1, -1, 4);\n  }\n\n  if (e.key === \"ArrowUp\") {\n    move(0, 3, 4, 1, 1, 4);\n  }\n\n  if (e.key === \"ArrowRight\") {\n    move(3, 0, 16, 4, -1, 1);\n  }\n\n  if (e.key === \"ArrowLeft\") {\n    move(0, 3, 16, 4, 1, 1);\n  }\n\n  const currState = getFieldState();\n\n  if (checkWin()) {\n    toggleHidden(messageWin);\n  }\n\n  if (checkStateChange(prevState, currState)) {\n    fillNewCell();\n  }\n\n  if (!checkEmptyCells() && !checkNeighbours()) {\n    console.log(checkEmptyCells());\n    toggleHidden(messageLose);\n\n    document.removeEventListener(\"keydown\", handleMove);\n  }\n};\n"],"names":[],"version":3,"file":"index.f75de5e1.js.map","sourceRoot":"/__parcel_source_root/"}