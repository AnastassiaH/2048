{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,C,S,E,C,E,O,A,S,C,E,G,M,O,C,G,O,E,E,E,I,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,K,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,K,G,E,I,A,W,M,A,U,wI,G,CCEA,IAAM,EAAc,SAAS,aAAa,CAAC,UAE3C,EAAY,kBAAkB,CAC5B,WACC,kEAKH,IAAM,EAAgB,SAAS,aAAa,CAAC,YACvC,EAAe,SAAS,aAAa,CAAC,kBACtC,EAAc,SAAS,aAAa,CAAC,iBACrC,EAAa,SAAS,aAAa,CAAC,gBACpC,EAAa,SAAS,gBAAgB,CAAC,eACvC,EAAY,SAAS,aAAa,CAAC,eAMnC,EAAoB,WACxB,IAAM,EAAY,EAAI,GAAY,MAAM,CAAC,SAAC,CAA1C,EAAiD,OAAA,AAAwB,IAAxB,EAAG,SAAS,CAAC,MAAM,A,GAC9D,EAAc,KAAK,KAAK,CAAC,KAAK,MAAM,GAAK,EAAU,MAAM,EAE/D,OAAO,CAAS,CAAC,EAAY,AAC/B,EAEM,EAAc,WAClB,IAAM,EAAO,IACP,EAZC,AAAiC,EAAjC,KAAK,KAAK,CAAC,AAAgB,GAAhB,KAAK,MAAM,IAAe,EAAI,CAchD,CAAA,EAAK,WAAW,CAAG,EACnB,EAAK,SAAS,CAAC,GAAG,CAAE,eAAoB,MAAA,CAAN,GACpC,EAEM,EAAe,WAAI,IAAA,IAAA,EAAA,UAAA,MAAA,CAAA,EAAA,AAAA,MAAA,GAAA,EAAA,EAAA,EAAA,EAAA,IAAA,CAAA,CAAA,EAAA,CAAA,SAAA,CAAA,EAAA,CACvB,EAAS,OAAO,CAAC,SAAC,CAAlB,EACE,EAAQ,SAAS,CAAC,MAAM,CAAC,SAC3B,EACF,EAEA,EAAY,gBAAgB,CAAC,QAAS,WACpC,IACA,IACA,EAAa,EAAa,EAAe,GACzC,EAAY,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","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nvar startButton = document.querySelector(\".start\");\nstartButton.insertAdjacentHTML(\"afterend\", '\\n  <button class=\"button restart hidden\">Restart</button>\\n  ');\nvar restartButton = document.querySelector(\".restart\");\nvar messageStart = document.querySelector(\".message-start\");\nvar messageLose = document.querySelector(\".message-lose\");\nvar messageWin = document.querySelector(\".message-win\");\nvar fieldCells = document.querySelectorAll(\".field-cell\");\nvar scoreSpan = document.querySelector(\".game-score\");\nvar getRandomCellValue = function() {\n    return Math.floor(Math.random() * 10) < 9 ? 2 : 4;\n};\nvar getFreeRandomCell = function() {\n    var freeCells = _to_consumable_array(fieldCells).filter(function(el) {\n        return el.classList.length === 1;\n    });\n    var randomIndex = Math.floor(Math.random() * freeCells.length);\n    return freeCells[randomIndex];\n};\nvar fillNewCell = function() {\n    var cell = getFreeRandomCell();\n    var value = getRandomCellValue();\n    cell.textContent = value;\n    cell.classList.add(\"field-cell--\".concat(value));\n};\nvar toggleHidden = function() {\n    for(var _len = arguments.length, elements = new Array(_len), _key = 0; _key < _len; _key++){\n        elements[_key] = arguments[_key];\n    }\n    elements.forEach(function(element) {\n        element.classList.toggle(\"hidden\");\n    });\n};\nstartButton.addEventListener(\"click\", function() {\n    fillNewCell();\n    fillNewCell();\n    toggleHidden(startButton, restartButton, messageStart);\n    messageLose.classList.add(\"hidden\");\n    document.addEventListener(\"keydown\", handleMove);\n});\nrestartButton.addEventListener(\"click\", function() {\n    _to_consumable_array(fieldCells).map(function(item) {\n        item.textContent = \"\";\n        item.className = \"field-cell\";\n    });\n    toggleHidden(startButton, restartButton, messageStart);\n    messageLose.classList.add(\"hidden\");\n    setScore(0);\n    document.addEventListener(\"keydown\", handleMove);\n});\nvar setProperClass = function(cell) {\n    if (cell.textContent) {\n        cell.className = \"field-cell field-cell--\".concat(cell.textContent);\n        return;\n    }\n    cell.className = \"field-cell\";\n};\nvar changeValues = function(line, valA, valB) {\n    var mult = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0;\n    var temp = line[valA + valB].textContent;\n    if (mult) temp *= 2;\n    line[valA].textContent = temp;\n    setProperClass(line[valA]);\n    line[valA + valB].textContent = \"\";\n    setProperClass(line[valA + valB]);\n};\nvar move = function(start, endX, endY, step, stepX, stepY) {\n    var _loop = function(x) {\n        var line = [];\n        for(var i = 0 + x; i < fieldCells.length; i += stepY)if (line.length < 4) line.push(fieldCells[i]);\n        var moveLine = function() {\n            var a = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : start, b = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : stepX;\n            for(var i = a; i !== endX; i += b){\n                if (!line[i].textContent) changeValues(line, i, b);\n                if (line[i].textContent === line[i + b].textContent && line[i].textContent) setProperClass(line[i]);\n            }\n        };\n        for(var y = 0; y < 3; y++)moveLine();\n        var collapseLine = function(i, b) {\n            var equalCount = 0;\n            if (line[i].textContent === line[i + b].textContent && !!line[i].textContent) {\n                equalCount++;\n                changeValues(line, i, b, 2);\n                setScore(+scoreSpan.textContent + +line[i].textContent * 2);\n            }\n            return equalCount;\n        };\n        for(var i1 = start; i1 !== endX; i1 += stepX)if (collapseLine(i1, stepX)) moveLine(i1, stepX);\n    };\n    for(var x = 0; x < endY; x += step)_loop(x);\n};\nvar setScore = function(value) {\n    scoreSpan.textContent = value;\n};\nvar getFieldState = function() {\n    var cells = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : fieldCells;\n    return _to_consumable_array(cells).map(function(cell) {\n        return cell.textContent;\n    });\n};\nvar checkStateChange = function(prev, curr) {\n    for(var i = 0; i < prev.length; i++){\n        if (prev[i] !== curr[i]) return true;\n    }\n    return false;\n};\nvar checkEmptyCells = function() {\n    return _to_consumable_array(fieldCells).some(function(el) {\n        return el.classList.length === 1;\n    });\n};\nvar checkWin = function() {\n    return _to_consumable_array(fieldCells).some(function(el) {\n        return el.textContent === 2048;\n    });\n};\nvar checkNeighbours = function() {\n    var cells = getFieldState();\n    for(var i = 0; i <= 12; i++){\n        if ((i + 1) % 4 === 0 && i <= 11) {\n            if (cells[i] === cells[i + 4]) return true;\n        }\n        if ((i + 1) % 4 !== 0) {\n            if (cells[i] === cells[i + 1] || cells[i] === cells[i + 4]) return true;\n        }\n    }\n    return false;\n};\nvar handleMove = function(e) {\n    var prevState = getFieldState();\n    if (e.key === \"ArrowDown\") move(3, 0, 4, 1, -1, 4);\n    if (e.key === \"ArrowUp\") move(0, 3, 4, 1, 1, 4);\n    if (e.key === \"ArrowRight\") move(3, 0, 16, 4, -1, 1);\n    if (e.key === \"ArrowLeft\") move(0, 3, 16, 4, 1, 1);\n    var currState = getFieldState();\n    if (checkWin()) toggleHidden(messageWin);\n    if (checkStateChange(prevState, currState)) fillNewCell();\n    if (!checkEmptyCells() && !checkNeighbours()) {\n        console.log(checkEmptyCells());\n        toggleHidden(messageLose);\n        document.removeEventListener(\"keydown\", handleMove);\n    }\n};\n\n//# sourceMappingURL=index.1948a7a5.js.map\n","\"use strict\";\n\nconst startButton = document.querySelector(\".start\");\n\nstartButton.insertAdjacentHTML(\n  \"afterend\",\n  `\n  <button class=\"button restart hidden\">Restart</button>\n  `\n);\n\nconst restartButton = document.querySelector(\".restart\");\nconst messageStart = document.querySelector(\".message-start\");\nconst messageLose = document.querySelector(\".message-lose\");\nconst messageWin = document.querySelector(\".message-win\");\nconst fieldCells = document.querySelectorAll(\".field-cell\");\nconst scoreSpan = document.querySelector(\".game-score\");\n\nconst getRandomCellValue = () => {\n  return Math.floor(Math.random() * 10) < 9 ? 2 : 4;\n};\n\nconst getFreeRandomCell = () => {\n  const freeCells = [...fieldCells].filter((el) => el.classList.length === 1);\n  const randomIndex = Math.floor(Math.random() * freeCells.length);\n\n  return freeCells[randomIndex];\n};\n\nconst fillNewCell = () => {\n  const cell = getFreeRandomCell();\n  const value = getRandomCellValue();\n\n  cell.textContent = value;\n  cell.classList.add(`field-cell--${value}`);\n};\n\nconst toggleHidden = (...elements) => {\n  elements.forEach((element) => {\n    element.classList.toggle(\"hidden\");\n  });\n};\n\nstartButton.addEventListener(\"click\", () => {\n  fillNewCell();\n  fillNewCell();\n  toggleHidden(startButton, restartButton, messageStart);\n  messageLose.classList.add(\"hidden\");\n  document.addEventListener(\"keydown\", handleMove);\n});\n\nrestartButton.addEventListener(\"click\", () => {\n  [...fieldCells].map((item) => {\n    item.textContent = \"\";\n    item.className = \"field-cell\";\n  });\n  toggleHidden(startButton, restartButton, messageStart);\n  messageLose.classList.add(\"hidden\");\n  setScore(0);\n  document.addEventListener(\"keydown\", handleMove);\n});\n\nconst setProperClass = (cell) => {\n  if (cell.textContent) {\n    cell.className = `field-cell field-cell--${cell.textContent}`;\n\n    return;\n  }\n\n  cell.className = `field-cell`;\n};\n\nconst changeValues = (line, valA, valB, mult = 0) => {\n  let temp = line[valA + valB].textContent;\n\n  if (mult) {\n    temp *= 2;\n  }\n\n  line[valA].textContent = temp;\n  setProperClass(line[valA]);\n  line[valA + valB].textContent = \"\";\n  setProperClass(line[valA + valB]);\n};\n\nconst move = (start, endX, endY, step, stepX, stepY) => {\n  for (let x = 0; x < endY; x += step) {\n    const line = [];\n\n    for (let i = 0 + x; i < fieldCells.length; i += stepY) {\n      if (line.length < 4) {\n        line.push(fieldCells[i]);\n      }\n    }\n\n    const moveLine = (a = start, b = stepX) => {\n      for (let i = a; i !== endX; i += b) {\n        if (!line[i].textContent) {\n          changeValues(line, i, b);\n        }\n\n        if (\n          line[i].textContent === line[i + b].textContent &&\n          line[i].textContent\n        ) {\n          setProperClass(line[i]);\n        }\n      }\n    };\n\n    for (let y = 0; y < 3; y++) {\n      moveLine();\n    }\n\n    const collapseLine = (i, b) => {\n      let equalCount = 0;\n\n      if (\n        line[i].textContent === line[i + b].textContent &&\n        !!line[i].textContent\n      ) {\n        equalCount++;\n        changeValues(line, i, b, 2);\n        setScore(+scoreSpan.textContent + +line[i].textContent * 2);\n      }\n\n      return equalCount;\n    };\n\n    for (let i = start; i !== endX; i += stepX) {\n      if (collapseLine(i, stepX)) {\n        moveLine(i, stepX);\n      }\n    }\n  }\n};\n\nconst setScore = (value) => {\n  scoreSpan.textContent = value;\n};\n\nconst getFieldState = (cells = fieldCells) => {\n  return [...cells].map((cell) => cell.textContent);\n};\n\nconst checkStateChange = (prev, curr) => {\n  for (let i = 0; i < prev.length; i++) {\n    if (prev[i] !== curr[i]) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nconst checkEmptyCells = () => {\n  return [...fieldCells].some((el) => {\n    return el.classList.length === 1;\n  });\n};\n\nconst checkWin = () => {\n  return [...fieldCells].some((el) => el.textContent === 2048);\n};\n\nconst checkNeighbours = () => {\n  const cells = getFieldState();\n\n  for (let i = 0; i <= 12; i++) {\n    if ((i + 1) % 4 === 0 && i <= 11) {\n      if (cells[i] === cells[i + 4]) {\n        return true;\n      }\n    }\n\n    if ((i + 1) % 4 !== 0) {\n      if (cells[i] === cells[i + 1] || cells[i] === cells[i + 4]) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\nconst handleMove = (e) => {\n  const prevState = getFieldState();\n\n  if (e.key === \"ArrowDown\") {\n    move(3, 0, 4, 1, -1, 4);\n  }\n\n  if (e.key === \"ArrowUp\") {\n    move(0, 3, 4, 1, 1, 4);\n  }\n\n  if (e.key === \"ArrowRight\") {\n    move(3, 0, 16, 4, -1, 1);\n  }\n\n  if (e.key === \"ArrowLeft\") {\n    move(0, 3, 16, 4, 1, 1);\n  }\n\n  const currState = getFieldState();\n\n  if (checkWin()) {\n    toggleHidden(messageWin);\n  }\n\n  if (checkStateChange(prevState, currState)) {\n    fillNewCell();\n  }\n\n  if (!checkEmptyCells() && !checkNeighbours()) {\n    console.log(checkEmptyCells());\n    toggleHidden(messageLose);\n\n    document.removeEventListener(\"keydown\", handleMove);\n  }\n};\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","_to_consumable_array","_array_without_holes","isArray","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","startButton","document","querySelector","insertAdjacentHTML","restartButton","messageStart","messageLose","messageWin","fieldCells","querySelectorAll","scoreSpan","getFreeRandomCell","freeCells","filter","el","classList","randomIndex","Math","floor","random","fillNewCell","cell","value","textContent","add","concat","toggleHidden","_len","arguments","elements","_key","forEach","element","toggle","addEventListener","handleMove","map","item","className","setScore","setProperClass","changeValues","line","valA","valB","mult","temp","move","start","endX","endY","step","stepX","stepY","x","_loop","push","moveLine","a","b","y","i1","collapseLine","equalCount","getFieldState","cells","checkStateChange","prev","curr","checkEmptyCells","some","checkNeighbours","e","prevState","key","currState","console","log","removeEventListener"],"version":3,"file":"index.1948a7a5.js.map"}